name: ${PROJECT_NAME}

networks:
  internal:
    driver: bridge

services:
  database:
    image: 'postgres:17.6@sha256:29e0bb09c8e7e7fc265ea9f4367de9622e55bae6b0b97e7cce740c2d63c2ebc0'
    platform: linux/amd64
    hostname: 'database.internal'
    restart: unless-stopped
    environment:
      - TZ=Europe/Zurich
      - POSTGRES_PASSWORD=${PG_ROOT_PASSWORD}
      - POSTGRES_DB=${TERRAHARBOR_DB_NAME}
      - TERRAHARBOR_DB_NAME=${TERRAHARBOR_DB_NAME}
      - TERRAHARBOR_DB_USER=${TERRAHARBOR_DB_USER}
      - TERRAHARBOR_DB_PASSWORD=${TERRAHARBOR_DB_PASSWORD}
    # Expose the database port on the VM to make it accessible for debugging.
    # ports:
    #   - 5432:5432
    volumes:
      - db-data:/var/lib/postgresql/data:rw # This path will change for versions >= 18. Check official documentation of the Docker image.
      - /home/ubuntu/terraharbor/database/db-init.sh:/docker-entrypoint-initdb.d/db-init.sh:ro
      - /home/ubuntu/terraharbor/database/db-init-scripts:/db-init-scripts:ro
    networks:
      - internal
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h 127.0.0.1 -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 10

  backend:
    image: '${BACKEND_IMAGE}:${BACKEND_IMAGE_VERSION}'
    platform: linux/amd64
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    environment:
      - TZ=Europe/Zurich
      - POSTGRES_HOST=database.internal
      - POSTGRES_DB=${TERRAHARBOR_DB_NAME}
      - POSTGRES_USER=${TERRAHARBOR_DB_USER}
      - POSTGRES_PASSWORD=${TERRAHARBOR_DB_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.backend.loadbalancer.server.port=${BACKEND_PORT}"
      - "traefik.http.routers.backend.rule=Host(`${HOSTNAME}`) && PathPrefix(`/state`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
    # Expose the backend port on the VM to make it accessible for debugging.
    # ports:
    #   - 8000:8000
    volumes:
      - tf-states:/data:rw
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  frontend:
    image: '${FRONTEND_IMAGE}:${FRONTEND_IMAGE_VERSION}'
    platform: linux/amd64
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - TZ=Europe/Zurich
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=${FRONTEND_PORT}"
      - "traefik.http.routers.frontend.rule=Host(`${HOSTNAME}`) && !PathPrefix(`/state`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
    networks:
      - internal

  reverseproxy:
    image: 'traefik:3.5.1@sha256:664bb8415fddadb71c2682b329c427d12c7d53593171665f2b7b6ff924509bc1'
    platform: linux/amd64
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    # TODO Add healthcheck for frontend service
    #   frontend:
    #     condition: service_healthy
    environment:
      - TZ=Europe/Zurich
    command:
      - "--global.checknewversion=false"
      - "--global.sendAnonymousUsage=false"
      # - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.letsencrypt.acme.email=goncalo.carvalheiroheleno@heig-vd.ch"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    labels:
      # Global redirection from HTTP to HTTPS.
      - "traefik.enable=true"
      - "traefik.http.routers.http-catchall.rule=PathPrefix(`/`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.port=443"
      - "traefik.http.routers.http-catchall.priority=1"
    networks:
      - internal
    ports:
      - 80:80
      - 443:443
      # Expose the Traefik Dashboard on the VM to make it accessible for debugging.
      # - 8080:8080 # Traefik Dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ssl-certs:/letsencrypt:rw

volumes:
  db-data:
  tf-states:
  ssl-certs:
