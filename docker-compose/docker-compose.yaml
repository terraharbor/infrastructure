name: ${PROJECT_NAME}

networks:
  internal:
    driver: bridge

# TODO Add setup container to verify environment variables and fail if not properly set

services:
  database:
    image: 'postgres:17.6'
    hostname: 'database.internal'
    restart: unless-stopped
    environment:
      - TZ=Europe/Zurich
      - POSTGRESQL_POSTGRES_PASSWORD=${PG_ROOT_PASSWORD}
      - POSTGRESQL_DATABASE=${PG_DATABASE_NAME}
      - POSTGRESQL_USERNAME=${PG_DATABASE_USER}
      - POSTGRESQL_PASSWORD=${PG_DATABASE_PASSWORD}
    # Expose the database port on the VM to make it accessible from the host machine.
    # ports:
    #   - 5432:5432 # FIXME Is there a way to expose this conditionally?
    volumes:
      - db-data:/data:ro
      # TODO Consider how to initialize the database schema and data
      # - ./db/db-init-script.sh:/docker-entrypoint-initdb.d/db-init-script.sh:ro
      # - ./db:/db-init-scripts:ro
    networks:
      - internal
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h 127.0.0.1 -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 10

  backend:
    image: '${BACKEND_IMAGE}:${BACKEND_IMAGE_VERSION}'
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    environment:
      - TZ=Europe/Zurich
    networks:
      - internal

  frontend:
    image: '${FRONTEND_IMAGE}:${FRONTEND_IMAGE_VERSION}'
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
      # TODO Add healthcheck for backend service
      # backend:
      #   condition: service_healthy
    environment:
      - TZ=Europe/Zurich
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=${FRONTEND_PORT}"
      - "traefik.http.routers.frontend.rule=Host(`${FRONTEND_HOSTNAME}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
    networks:
      - internal

  reverseproxy:
    image: 'traefik:3.5.1'
    restart: unless-stopped
    # TODO Add healthcheck for frontend service
    # depends_on:
    #   frontend:
    #     condition: service_healthy
    environment:
      - TZ=Europe/Zurich
    command:
      - "--global.checknewversion=false"
      - "--global.sendAnonymousUsage=false"
      # - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.letsencrypt.acme.email=goncalo.carvalheiroheleno@heig-vd.ch"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    networks:
      - internal
    ports:
      - 80:80
      - 443:443
      - 8080:8080 # Traefik Dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ssl-certs:/letsencrypt:rw


volumes:
  db-data:
  ssl-certs:
