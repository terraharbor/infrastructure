name: terraform-plan-apply

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
  workflow_dispatch:
    inputs:
      confirmation:
        description: Select "Yes" to confirm the application of changes
        required: true
        default: "No"
        type: choice
        options:
          - "Yes"
          - "No"

# Special permissions required for OIDC authentication.
permissions:
  id-token: write
  contents: read
  pull-requests: write

defaults:
  run:
    working-directory: terraform

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
    - name: Check-out the repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Initialize Terraform
      run: terraform init
      env:
        ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}

    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Check Terraform Formatting
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Run Terraform Plan
      id: tf-plan
      env:
        ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
        
    - name: Publish Terraform Plan to GitHub Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: terraform/tfplan

    - name: Create plan string output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        TERRAFORM_PLAN_SIZE=${#TERRAFORM_PLAN}
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        
        if [ $TERRAFORM_PLAN_SIZE -gt 10000 ]; then
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" | grep -E "Plan: [0-9]+ to add, [0-9]+ to change, [0-9]+ to destroy\." >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "Plan truncated. Full plan output was ${TERRAFORM_PLAN_SIZE} bytes (limit: 10000)." >> $GITHUB_OUTPUT
        else
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
        fi
        
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT

    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
    # If this is a PR post the changes
    - name: Push Terraform Output to PR
      if: github.ref != 'refs/heads/main'
      uses: actions/github-script@v7
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })

  terraform-apply:
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2 && (github.event.inputs.confirmation == 'Yes' || github.event_name != 'workflow_dispatch')
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    
    steps:
    - name: Check-out the repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Initialize Terraform
      run: terraform init
      env:
        ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}

    - name: Download Terraform Plan from GitHub Artifacts
      uses: actions/download-artifact@v4
      with:
        name: tfplan
        path: terraform

    - name: Run Terraform Apply
      env:
        ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
      run: |
        terraform apply -auto-approve tfplan

    - name: Generate authentication token from GitHub App
      id: app_token
      uses: actions/create-github-app-token@v2.1.1
      with:
        app-id: ${{ secrets.TERRAHARBOR_MAINTAINER_APP_ID }}
        private-key: ${{ secrets.TERRAHARBOR_MAINTAINER_PRIVATE_KEY }}

    - name: Dispatch Ansible workflow
      uses: peter-evans/repository-dispatch@v3
      with:
        event-type: ansible-vm-config
        token: ${{ steps.app_token.outputs.token }}
